// Code generated by mockery v2.12.1. DO NOT EDIT.

package dynamodb

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// MockDBHandler is an autogenerated mock type for the DBHandler type
type MockDBHandler struct {
	mock.Mock
}

// AddRecord provides a mock function with given fields: ctx, in, createSortKey
func (_m *MockDBHandler) AddRecord(ctx context.Context, in BaseModel, createSortKey bool) (DBPSKeyValues, error) {
	ret := _m.Called(ctx, in, createSortKey)

	var r0 DBPSKeyValues
	if rf, ok := ret.Get(0).(func(context.Context, BaseModel, bool) DBPSKeyValues); ok {
		r0 = rf(ctx, in, createSortKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DBPSKeyValues)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, BaseModel, bool) error); ok {
		r1 = rf(ctx, in, createSortKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkAddRecords provides a mock function with given fields: ctx, baseModel, createSortKey, records
func (_m *MockDBHandler) BulkAddRecords(ctx context.Context, baseModel BaseModel, createSortKey bool, records ...BaseModel) ([]BaseModel, error) {
	_va := make([]interface{}, len(records))
	for _i := range records {
		_va[_i] = records[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, baseModel, createSortKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []BaseModel
	if rf, ok := ret.Get(0).(func(context.Context, BaseModel, bool, ...BaseModel) []BaseModel); ok {
		r0 = rf(ctx, baseModel, createSortKey, records...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BaseModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, BaseModel, bool, ...BaseModel) error); ok {
		r1 = rf(ctx, baseModel, createSortKey, records...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkDeleteRecords provides a mock function with given fields: ctx, dbKeys
func (_m *MockDBHandler) BulkDeleteRecords(ctx context.Context, dbKeys ...DBPSKeyValues) ([]DBPSKeyValues, error) {
	_va := make([]interface{}, len(dbKeys))
	for _i := range dbKeys {
		_va[_i] = dbKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []DBPSKeyValues
	if rf, ok := ret.Get(0).(func(context.Context, ...DBPSKeyValues) []DBPSKeyValues); ok {
		r0 = rf(ctx, dbKeys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DBPSKeyValues)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...DBPSKeyValues) error); ok {
		r1 = rf(ctx, dbKeys...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkUpdateRecords provides a mock function with given fields: ctx, baseModel, records
func (_m *MockDBHandler) BulkUpdateRecords(ctx context.Context, baseModel BaseModel, records ...BaseModel) ([]BaseModel, error) {
	_va := make([]interface{}, len(records))
	for _i := range records {
		_va[_i] = records[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, baseModel)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []BaseModel
	if rf, ok := ret.Get(0).(func(context.Context, BaseModel, ...BaseModel) []BaseModel); ok {
		r0 = rf(ctx, baseModel, records...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BaseModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, BaseModel, ...BaseModel) error); ok {
		r1 = rf(ctx, baseModel, records...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecordByID provides a mock function with given fields: ctx, dbKeys, filters
func (_m *MockDBHandler) DeleteRecordByID(ctx context.Context, dbKeys DBPSKeyValues, filters *AwsExpressionWrapper) error {
	ret := _m.Called(ctx, dbKeys, filters)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DBPSKeyValues, *AwsExpressionWrapper) error); ok {
		r0 = rf(ctx, dbKeys, filters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, input, name, dbKeys
func (_m *MockDBHandler) GetByID(ctx context.Context, input BaseModel, name DynamoTableOrIndexName, dbKeys DBPSKeyValues) (BaseModel, error) {
	ret := _m.Called(ctx, input, name, dbKeys)

	var r0 BaseModel
	if rf, ok := ret.Get(0).(func(context.Context, BaseModel, DynamoTableOrIndexName, DBPSKeyValues) BaseModel); ok {
		r0 = rf(ctx, input, name, dbKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BaseModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, BaseModel, DynamoTableOrIndexName, DBPSKeyValues) error); ok {
		r1 = rf(ctx, input, name, dbKeys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDs provides a mock function with given fields: ctx, input, dbKeys
func (_m *MockDBHandler) GetByIDs(ctx context.Context, input BaseModel, dbKeys []DBPSKeyValues) ([]BaseModel, error) {
	ret := _m.Called(ctx, input, dbKeys)

	var r0 []BaseModel
	if rf, ok := ret.Get(0).(func(context.Context, BaseModel, []DBPSKeyValues) []BaseModel); ok {
		r0 = rf(ctx, input, dbKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BaseModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, BaseModel, []DBPSKeyValues) error); ok {
		r1 = rf(ctx, input, dbKeys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordsWithQueryFilter provides a mock function with given fields: ctx, input, filters
func (_m *MockDBHandler) GetRecordsWithQueryFilter(ctx context.Context, input BaseModel, filters *AwsExpressionWrapper) ([]BaseModel, DBAttributeValues, error) {
	ret := _m.Called(ctx, input, filters)

	var r0 []BaseModel
	if rf, ok := ret.Get(0).(func(context.Context, BaseModel, *AwsExpressionWrapper) []BaseModel); ok {
		r0 = rf(ctx, input, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BaseModel)
		}
	}

	var r1 DBAttributeValues
	if rf, ok := ret.Get(1).(func(context.Context, BaseModel, *AwsExpressionWrapper) DBAttributeValues); ok {
		r1 = rf(ctx, input, filters)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(DBAttributeValues)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, BaseModel, *AwsExpressionWrapper) error); ok {
		r2 = rf(ctx, input, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRecordsWithScanFilter provides a mock function with given fields: ctx, input, filters
func (_m *MockDBHandler) GetRecordsWithScanFilter(ctx context.Context, input BaseModel, filters *AwsExpressionWrapper) ([]BaseModel, DBAttributeValues, error) {
	ret := _m.Called(ctx, input, filters)

	var r0 []BaseModel
	if rf, ok := ret.Get(0).(func(context.Context, BaseModel, *AwsExpressionWrapper) []BaseModel); ok {
		r0 = rf(ctx, input, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BaseModel)
		}
	}

	var r1 DBAttributeValues
	if rf, ok := ret.Get(1).(func(context.Context, BaseModel, *AwsExpressionWrapper) DBAttributeValues); ok {
		r1 = rf(ctx, input, filters)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(DBAttributeValues)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, BaseModel, *AwsExpressionWrapper) error); ok {
		r2 = rf(ctx, input, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateRecordByID provides a mock function with given fields: ctx, in, dbKeys
func (_m *MockDBHandler) UpdateRecordByID(ctx context.Context, in BaseModel, dbKeys DBPSKeyValues) error {
	ret := _m.Called(ctx, in, dbKeys)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, BaseModel, DBPSKeyValues) error); ok {
		r0 = rf(ctx, in, dbKeys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDBHandler creates a new instance of MockDBHandler. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDBHandler(t testing.TB) *MockDBHandler {
	mock := &MockDBHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
